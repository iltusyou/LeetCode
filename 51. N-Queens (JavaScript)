/**from https://leetcode.com/problems/n-queens/
The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

 * @param {number} n
 * @return {string[][]}
 */
 
    var Queens = new Array();//global variable
    var output = new Array();//global variable
    var grid;//global variable

    var printQueen = function (Queens) {

    var arrTemp = new Array();

    for (var i = 0; i < grid; i++) {
        var strTemp = "";
        for (var j = 0; j < grid; j++) {
            if (j == Queens[i])
                strTemp += "Q";
            else
                strTemp += ".";
        }
        arrTemp[i] = strTemp;
    }
    output.push(arrTemp);
    }
    
    var canPlaceQueen = function (x,y) {
        //x: 第幾個皇后
        //y: 放置的位置            
        for (var i = 0; i < x; i++) {
            /*判定橫、左上斜、左下斜是否已經放置皇后*/
            if (y == Queens[i] || (x - i) == (y - Queens[i]) || (x - i) == (Queens[i] - y)) {                    
                return false;                    
            }
        }            
        return true;
    }      
        
    var placeQueen = function (r) {
        for (var i = 0; i < grid; i++) {
            if (canPlaceQueen(r,i)) {
                Queens[r] = i;
                if (r == grid - 1) {                        
                    printQueen(Queens);                        
                }                        
                else {
                    placeQueen(r + 1)                       
                }                        
            }
        }
    }
 
var solveNQueens = function(n) {
    
    Queens.length = 0;
    output.length = 0;
    grid=n;
    Queens = Array(grid);            
    var r = 0;            
    placeQueen(r);
        
    return output;

};
